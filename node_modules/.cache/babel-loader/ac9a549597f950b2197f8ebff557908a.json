{"ast":null,"code":"var _jsxFileName = \"/mnt/Data/Javascript_code/Ionic/coffee-db2/src/components/backend/loadData.js\";\nimport React, { useContext, useState } from 'react';\nimport { readData, readSettings } from './data';\nimport { beansDefault, brewsDefault } from '../objects/default-values';\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName } from '../objects/filenames';\nimport { createTable } from '../frontend/create-table.js';\nimport { store } from './store';\nexport const LoadData = () => {\n  let isLoaded = false;\n  let beansSettings;\n  let beansData;\n  [test, setTest] = useState('blabla');\n  /*\n  const loadAsync = async () => {\n      // Settings Beans\n      const beansSettingsRaw = await readSettings(beansSettingsFileName)\n      \n      if (beansSettingsRaw) {\n          beansSettings = JSON.parse(beansSettingsRaw)\n      } else {\n          beansSettings = beansDefault\n      }\n      // Settings Brews\n       // Data Beans\n      const rawDataBeans = await readData(beansDataFileName)\n      beansData = createTable(rawDataBeans)\n       // Data Brews\n       isLoaded = true\n  }\n  loadAsync() */\n  //while (isLoaded === false){}\n  //set global State\n  //const globalState = useContext(store)\n  //const {state, dispatch } = globalState\n  //dispatch({type: 'setBeansSettings', value: beansSettings})\n  //dispatch({type: 'setBeansData', value: beansData})\n  //console.log('BeansSettings:', state.beans.settings)\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }\n  }, \"HALLO\");\n};\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db2/src/components/backend/loadData.js"],"names":["React","useContext","useState","readData","readSettings","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","isLoaded","beansSettings","beansData","test","setTest"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;AAEA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,QAAvC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,2BAA3C;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,qBAAnD,EAA0EC,iBAA1E,QAAoG,sBAApG;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAE1B,MAAIC,QAAQ,GAAG,KAAf;AAEA,MAAIC,aAAJ;AACA,MAAIC,SAAJ;AAEA,GAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,QAAD,CAA1B;AACA;;;;;;;;;;;;;;;;;;AAsBA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACH,CAzCM;AA4DP;;;;;;;;;;;;;;;;AAgBA","sourcesContent":["import React, { useContext, useState} from 'react'\n\nimport { readData, readSettings } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = () => {\n\n    let isLoaded = false \n\n    let beansSettings\n    let beansData\n\n    [test, setTest] = useState('blabla')\n    /*\n    const loadAsync = async () => {\n        // Settings Beans\n        const beansSettingsRaw = await readSettings(beansSettingsFileName)\n        \n        if (beansSettingsRaw) {\n            beansSettings = JSON.parse(beansSettingsRaw)\n        } else {\n            beansSettings = beansDefault\n        }\n        // Settings Brews\n\n        // Data Beans\n        const rawDataBeans = await readData(beansDataFileName)\n        beansData = createTable(rawDataBeans)\n\n        // Data Brews\n\n        isLoaded = true\n    }\n    loadAsync() */\n\n    //while (isLoaded === false){}\n\n    //set global State\n    //const globalState = useContext(store)\n    //const {state, dispatch } = globalState\n\n    //dispatch({type: 'setBeansSettings', value: beansSettings})\n    //dispatch({type: 'setBeansData', value: beansData})\n\n    //console.log('BeansSettings:', state.beans.settings)\n    return <h1>HALLO</h1>\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */\n\n\n\n"]},"metadata":{},"sourceType":"module"}