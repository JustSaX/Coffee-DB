{"ast":null,"code":"var _jsxFileName = \"/mnt/Data/Javascript_code/Ionic/coffee-db2/src/components/backend/loadData.js\";\nimport React, { useContext } from 'react';\nimport { readData, readSettings } from './data';\nimport { beansDefault, brewsDefault } from '../objects/default-values';\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName } from '../objects/filenames';\nimport { createTable } from '../frontend/create-table.js';\nimport { store } from './store';\nexport const LoadData = async () => {\n  // Settings Beans\n  const beansSettingsRaw = await readSettings(beansSettingsFileName);\n  let beansSettings;\n\n  if (beansSettingsRaw) {\n    beansSettings = JSON.parse(beansSettingsRaw);\n  } else {\n    beansSettings = beansDefault;\n  } // Settings Brews\n  // Data Beans\n\n\n  const rawDataBeans = await readData(beansDataFileName);\n  const beansData = createTable(rawDataBeans); // Data Brews\n  //set global State\n\n  const globalState = useContext(store);\n  const {\n    state,\n    dispatch\n  } = globalState;\n  dispatch({\n    type: 'setBeansSettings',\n    value: beansSettings\n  });\n  dispatch({\n    type: 'setBeansData',\n    value: beansData\n  });\n  console.log('BeansSettings:', state.beans.settings);\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }\n  }, \"Hello \");\n};\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db2/src/components/backend/loadData.js"],"names":["React","useContext","readData","readSettings","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","beansSettingsRaw","beansSettings","JSON","parse","rawDataBeans","beansData","globalState","state","dispatch","type","value","console","log","beans","settings"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAiC,OAAjC;AAEA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,QAAvC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,2BAA3C;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,qBAAnD,EAA0EC,iBAA1E,QAAoG,sBAApG;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAG,YAAY;AAChC;AACA,QAAMC,gBAAgB,GAAG,MAAMV,YAAY,CAACG,qBAAD,CAA3C;AACA,MAAIQ,aAAJ;;AACA,MAAID,gBAAJ,EAAsB;AAClBC,IAAAA,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,gBAAX,CAAhB;AACH,GAFD,MAEO;AACHC,IAAAA,aAAa,GAAGV,YAAhB;AACH,GAR+B,CAShC;AAEA;;;AACA,QAAMa,YAAY,GAAG,MAAMf,QAAQ,CAACK,iBAAD,CAAnC;AACA,QAAMW,SAAS,GAAGR,WAAW,CAACO,YAAD,CAA7B,CAbgC,CAehC;AAGA;;AACA,QAAME,WAAW,GAAGlB,UAAU,CAACU,KAAD,CAA9B;AACA,QAAM;AAACS,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAqBF,WAA3B;AAEAE,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,kBAAP;AAA2BC,IAAAA,KAAK,EAAET;AAAlC,GAAD,CAAR;AACAO,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,KAAK,EAAEL;AAA9B,GAAD,CAAR;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAAK,CAACM,KAAN,CAAYC,QAA1C;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,CA3BM;AA8BP;;;;;;;;;;;;;;;;AAgBA","sourcesContent":["import React, { useContext} from 'react'\n\nimport { readData, readSettings } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = async () => {\n    // Settings Beans\n    const beansSettingsRaw = await readSettings(beansSettingsFileName)\n    let beansSettings\n    if (beansSettingsRaw) {\n        beansSettings = JSON.parse(beansSettingsRaw)\n    } else {\n        beansSettings = beansDefault\n    }\n    // Settings Brews\n\n    // Data Beans\n    const rawDataBeans = await readData(beansDataFileName)\n    const beansData = createTable(rawDataBeans)\n\n    // Data Brews\n\n\n    //set global State\n    const globalState = useContext(store)\n    const {state, dispatch } = globalState\n\n    dispatch({type: 'setBeansSettings', value: beansSettings})\n    dispatch({type: 'setBeansData', value: beansData})\n\n    console.log('BeansSettings:', state.beans.settings)\n    return <h1>Hello </h1>\n}\n\n\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */\n\n\n\n"]},"metadata":{},"sourceType":"module"}