{"ast":null,"code":"import { Plugins, FilesystemDirectory, FilesystemEncoding, Capacitor } from '@capacitor/core';\nimport { idCreator, dateCreator, timeCreator } from './idcreator';\nconst {\n  Filesystem\n} = Plugins;\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',\n  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8\n};\nconst fileSettingsWrite = {\n  path: '',\n  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n  recursive: true //create folders if they don't exist\n\n}; //************************\n//Writing or storing Data\n//************************\n//dataset needs to be an object and not an array!\n\nexport const storeData = async (filename, dataset, photo) => {\n  const id = idCreator();\n  const date = dateCreator();\n  const time = timeCreator(); //const object = {[id]:dataset}\n\n  const object = {\n    id: id,\n    Datum: date,\n    Uhrzeit: time\n  };\n  Object.assign(object, dataset);\n  await writeFile(filename, object);\n\n  if (photo) {\n    //filename contains something like data/beans.data, split will split the string into\n    //[data, beans.data] and save data into path => [0] is the first element of the array created by split\n    const path = filename.split('/')[0];\n    const photoFilename = path + '/' + id.toString() + '.jpeg';\n    writePhoto(photoFilename, photo);\n  }\n\n  return;\n};\n\nconst writeFile = async (filename, object) => {\n  let dataToWrite = JSON.stringify(object); //let dataToWrite = 'Hallo Android'\n  // try to open the file if it exists, append if not create it\n\n  try {\n    const ret = await Filesystem.readFile({\n      path: filename,\n      directory: FilesystemDirectory.External\n    });\n    const append = await Filesystem.appendFile({\n      path: filename,\n      data: '\\n' + dataToWrite,\n      directory: FilesystemDirectory.External,\n      encoding: FilesystemEncoding.UTF8\n    });\n    console.log('file is existing');\n  } catch (e) {\n    console.log(e.message);\n\n    if (e.message.includes('File does not exist')) {\n      // File not found\n      console.log(e.message.includes('File does not exist'));\n      console.log('file not found');\n      const write = await Filesystem.writeFile({\n        path: filename,\n        data: dataToWrite,\n        directory: FilesystemDirectory.External,\n        //set back to external!\n        encoding: FilesystemEncoding.UTF8,\n        recursive: true //create folders if they don't exist\n\n      });\n      console.log('new file written');\n    }\n  }\n}; //writing picture to file\n\n\nconst writePhoto = async (filename, photo) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite); //careful shwallow copy\n\n  fileSettingsWriteCopy.path = filename;\n  fileSettingsWriteCopy.data = photo.dataUrl;\n  fileSettingsWriteCopy.encoding = console.log(fileSettingsWriteCopy);\n  await Filesystem.writeFile(fileSettingsWriteCopy);\n}; //writing settings to file, if file does exist it will be overwritten\n\n\nexport const overWriteFile = async (filename, object) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite); //careful shwallow copy\n\n  fileSettingsWriteCopy.path = filename;\n  fileSettingsWriteCopy.data = JSON.stringify(object);\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy);\n}; //************************\n//Reading Data\n//************************\n// reading data from file, if file doesn't exist return false\n\nexport const readData = async filename => {\n  let readFile = '';\n\n  try {\n    readFile = await Filesystem.readFile({\n      path: filename,\n      directory: FilesystemDirectory.External,\n      encoding: FilesystemEncoding.UTF8\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return readFile.data;\n}; //reading data from File, if file doesn't exist false will be returned\n\nexport const readSettings = async filename => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead);\n  fileSettingsReadCopy.path = filename;\n  let readFile = '';\n\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy);\n  } catch (e) {\n    return false;\n  }\n\n  return readFile.data;\n};\nexport const readPicture = filename => {\n  console.log('read pic filename:', filename);\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead);\n  fileSettingsReadCopy.path = filename;\n  fileSettingsReadCopy.encoding = console.log('');\n  let readPic = '';\n\n  const readPicData = async () => {\n    const showDir = Filesystem.readdir({\n      path: '/data',\n      directory: FilesystemDirectory.External\n    });\n    console.log('directory content:', showDir);\n\n    try {\n      readPic = await Filesystem.getUri(fileSettingsReadCopy);\n      console.log('readPic1:', readPic);\n    } catch (e) {\n      console.log('readpic error:', e);\n      return false;\n    }\n\n    readPic = Capacitor.convertFileSrc(readPic.uri); //let photoPath = Capacitor.convertFileSrc(finalPhotoUri.uri)\n\n    console.log('readPic2:', readPic);\n  };\n\n  readPicData();\n  return readPic.uri;\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/backend/data.js"],"names":["Plugins","FilesystemDirectory","FilesystemEncoding","Capacitor","idCreator","dateCreator","timeCreator","Filesystem","fileSettingsRead","path","directory","External","encoding","UTF8","fileSettingsWrite","data","recursive","storeData","filename","dataset","photo","id","date","time","object","Datum","Uhrzeit","Object","assign","writeFile","split","photoFilename","toString","writePhoto","dataToWrite","JSON","stringify","ret","readFile","append","appendFile","console","log","e","message","includes","write","fileSettingsWriteCopy","dataUrl","overWriteFile","readData","readSettings","fileSettingsReadCopy","readPicture","readPic","readPicData","showDir","readdir","getUri","convertFileSrc","uri"],"mappings":"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","sourcesContent":["\nimport { Plugins, FilesystemDirectory, FilesystemEncoding, Capacitor } from '@capacitor/core'\nimport { idCreator, dateCreator, timeCreator } from './idcreator'\n\nconst { Filesystem } = Plugins\n\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n}\n\nconst fileSettingsWrite= {\n  path: '',  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n  recursive: true    //create folders if they don't exist\n}\n\n//************************\n//Writing or storing Data\n//************************\n\n\n//dataset needs to be an object and not an array!\nexport const storeData = async (filename, dataset, photo) => {\n   const id = idCreator()\n   const date = dateCreator()\n   const time = timeCreator()\n\n    //const object = {[id]:dataset}\n   const object = {id: id,\n                  Datum: date,\n                  Uhrzeit: time}\n   Object.assign(object, dataset)\n\n  await writeFile(filename, object)\n\n  if(photo) {\n    //filename contains something like data/beans.data, split will split the string into\n    //[data, beans.data] and save data into path => [0] is the first element of the array created by split\n    const path = filename.split('/')[0]\n    const photoFilename = path +'/'+ id.toString() +'.jpeg'\n    writePhoto(photoFilename, photo)\n  }\n\nreturn\n} \nconst writeFile = async (filename, object) => {\n    let dataToWrite = JSON.stringify(object)\n    //let dataToWrite = 'Hallo Android'\n    // try to open the file if it exists, append if not create it\n    try {\n        const ret = await Filesystem.readFile({\n          path: filename,\n          directory: FilesystemDirectory.External\n        })\n        const append = await Filesystem.appendFile({\n            path: filename,\n            data: '\\n'+ dataToWrite,\n            directory: FilesystemDirectory.External,\n            encoding: FilesystemEncoding.UTF8,\n        })\n        console.log('file is existing')\n      } catch (e) {\n        console.log(e.message)\n        if (e.message.includes('File does not exist')){\n        // File not found\n          console.log(e.message.includes('File does not exist'))\n          console.log('file not found')\n          const write = await Filesystem.writeFile({\n              path: filename,\n              data: dataToWrite,\n              directory: FilesystemDirectory.External,  //set back to external!\n              encoding: FilesystemEncoding.UTF8,\n              recursive: true    //create folders if they don't exist\n         })\n         console.log('new file written')\n        }\n     }\n}\n\n\n//writing picture to file\nconst writePhoto = async (filename, photo) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite) //careful shwallow copy\n  fileSettingsWriteCopy.path = filename\n  fileSettingsWriteCopy.data = photo.dataUrl\n  fileSettingsWriteCopy.encoding = \n  console.log(fileSettingsWriteCopy)\n  await Filesystem.writeFile(fileSettingsWriteCopy)\n}\n\n\n//writing settings to file, if file does exist it will be overwritten\nexport const overWriteFile = async (filename, object) => {\n let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite) //careful shwallow copy\n  fileSettingsWriteCopy.path = filename\n  fileSettingsWriteCopy.data = JSON.stringify(object)\n\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy)\n}\n\n//************************\n//Reading Data\n//************************\n\n// reading data from file, if file doesn't exist return false\nexport const readData = async (filename) => {\n  let readFile = ''\n  try {\n  readFile = await Filesystem.readFile({\n    path: filename,\n    directory: FilesystemDirectory.External,\n    encoding: FilesystemEncoding.UTF8\n  })\n} catch (e){\n  return false\n}\n  return readFile.data\n  }\n\n\n\n//reading data from File, if file doesn't exist false will be returned\nexport const readSettings = async (filename) => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead)\n  fileSettingsReadCopy.path = filename\n  let readFile = ''\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy)\n  } catch(e){\n    return false\n  }\n  return readFile.data\n}\n\n\nexport const readPicture = (filename) => {\n  console.log('read pic filename:', filename)\n\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead)\n  fileSettingsReadCopy.path = filename\n  fileSettingsReadCopy.encoding =\n  console.log('')\n\n  let readPic = ''\n  const readPicData = async () => {\n    const showDir = Filesystem.readdir({path: '/data', directory: FilesystemDirectory.External})\n    console.log('directory content:', showDir)\n    try {\n      readPic = await Filesystem.getUri(fileSettingsReadCopy)\n      console.log('readPic1:',readPic)  \n    } catch(e){\n      console.log('readpic error:', e)\n      return false\n    }\n    readPic = Capacitor.convertFileSrc(readPic.uri)\n    //let photoPath = Capacitor.convertFileSrc(finalPhotoUri.uri)\n    console.log('readPic2:',readPic)    \n  }\n  readPicData()\n  return readPic.uri}"]},"metadata":{},"sourceType":"module"}