{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { readData, readSettings } from './data';\nimport { beansDefault, brewsDefault } from '../objects/default-values';\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName } from '../objects/filenames';\nimport { createTable } from '../frontend/create-table.js';\nimport { store } from './store';\nexport const LoadData = () => {\n  const globalState = useContext(store);\n  const {\n    state,\n    dispatch\n  } = globalState;\n  let isLoaded = false;\n  let beansSettings;\n  let brewsSettings;\n  let beansData;\n  let brewsData;\n  useEffect(() => {\n    const loadAsync = async () => {\n      //   console.log('im in async func')\n      // Settings Beans\n      const beansSettingsRaw = await readSettings(beansSettingsFileName);\n\n      if (beansSettingsRaw) {\n        beansSettings = JSON.parse(beansSettingsRaw);\n      } else {\n        beansSettings = beansDefault;\n      } // Settings Brews\n\n\n      const brewsSettingsRaw = await readSettings(brewsSettingsFileName);\n\n      if (brewsSettingsRaw) {\n        brewsSettings = JSON.parse(brewsSettingsRaw);\n      } else {\n        brewsSettings = brewsDefault;\n      } // Data Beans\n\n\n      const rawDataBeans = await readData(beansDataFileName);\n      beansData = createTable(rawDataBeans); // Data Brews\n\n      const rawDataBrews = await readData(brewsDataFileName);\n      console.log(\"loadAsync -> rawDataBrews\", rawDataBrews);\n      brewsData = createTable(rawDataBrews); //  console.log('end of async func')\n\n      isLoaded = true; //  console.log('isloade', isLoaded)\n\n      dispatch({\n        type: 'setBeansSettings',\n        value: beansSettings\n      });\n      dispatch({\n        type: 'setBeansData',\n        value: beansData\n      });\n      dispatch({\n        type: 'setBrewsSettings',\n        value: brewsSettings\n      });\n      dispatch({\n        type: 'setBrewsData',\n        value: brewsData\n      }); //  console.log('BeansSettingsDespatch:', state.beans.settings)\n\n      console.log('BeansDataDespatched', state.beans.data);\n    };\n\n    loadAsync(); //  console.log('i m after async func')\n  }, []);\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db3/src/components/backend/loadData.js"],"names":["React","useContext","useState","useEffect","readData","readSettings","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","globalState","state","dispatch","isLoaded","beansSettings","brewsSettings","beansData","brewsData","loadAsync","beansSettingsRaw","JSON","parse","brewsSettingsRaw","rawDataBeans","rawDataBrews","console","log","type","value","beans","data"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,QAAsD,OAAtD;AAEA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,QAAvC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,2BAA3C;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,qBAAnD,EAA0EC,iBAA1E,QAAoG,sBAApG;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGd,UAAU,CAACY,KAAD,CAA9B;AACA,QAAM;AAACG,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAqBF,WAA3B;AACA,MAAIG,QAAQ,GAAG,KAAf;AAEA,MAAIC,aAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,SAAJ;AAEAnB,EAAAA,SAAS,CAAE,MAAM;AAEjB,UAAMoB,SAAS,GAAG,YAAY;AAC7B;AACG;AACA,YAAMC,gBAAgB,GAAG,MAAMnB,YAAY,CAACG,qBAAD,CAA3C;;AAEA,UAAIgB,gBAAJ,EAAsB;AAClBL,QAAAA,aAAa,GAAGM,IAAI,CAACC,KAAL,CAAWF,gBAAX,CAAhB;AACH,OAFD,MAEO;AACHL,QAAAA,aAAa,GAAGb,YAAhB;AACH,OATyB,CAW1B;;;AACA,YAAMqB,gBAAgB,GAAG,MAAMtB,YAAY,CAACK,qBAAD,CAA3C;;AAEA,UAAIiB,gBAAJ,EAAsB;AACpBP,QAAAA,aAAa,GAAGK,IAAI,CAACC,KAAL,CAAWC,gBAAX,CAAhB;AACD,OAFD,MAEO;AACLP,QAAAA,aAAa,GAAGb,YAAhB;AACD,OAlByB,CAoB1B;;;AACA,YAAMqB,YAAY,GAAG,MAAMxB,QAAQ,CAACK,iBAAD,CAAnC;AACAY,MAAAA,SAAS,GAAGT,WAAW,CAACgB,YAAD,CAAvB,CAtB0B,CAwB1B;;AACA,YAAMC,YAAY,GAAG,MAAMzB,QAAQ,CAACO,iBAAD,CAAnC;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,YAAzC;AAEAP,MAAAA,SAAS,GAAGV,WAAW,CAACiB,YAAD,CAAvB,CA5B0B,CA6B5B;;AACEX,MAAAA,QAAQ,GAAG,IAAX,CA9B0B,CA+B5B;;AACED,MAAAA,QAAQ,CAAC;AAACe,QAAAA,IAAI,EAAE,kBAAP;AAA2BC,QAAAA,KAAK,EAAEd;AAAlC,OAAD,CAAR;AACAF,MAAAA,QAAQ,CAAC;AAACe,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,KAAK,EAAEZ;AAA9B,OAAD,CAAR;AAEAJ,MAAAA,QAAQ,CAAC;AAACe,QAAAA,IAAI,EAAE,kBAAP;AAA2BC,QAAAA,KAAK,EAAEb;AAAlC,OAAD,CAAR;AACAH,MAAAA,QAAQ,CAAC;AAACe,QAAAA,IAAI,EAAE,cAAP;AAAuBC,QAAAA,KAAK,EAAEX;AAA9B,OAAD,CAAR,CApC0B,CAqC5B;;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCf,KAAK,CAACkB,KAAN,CAAYC,IAA/C;AACD,KAvCD;;AAwCAZ,IAAAA,SAAS,GA1CQ,CA2CnB;AAED,GA7CY,EA6CT,EA7CS,CAAT;AA8CH,CAxDM","sourcesContent":["import React, { useContext, useState, useEffect} from 'react'\n\nimport { readData, readSettings } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = () => {\n    const globalState = useContext(store)\n    const {state, dispatch } = globalState\n    let isLoaded = false \n\n    let beansSettings\n    let brewsSettings\n    let beansData\n    let brewsData\n    \n    useEffect( () => {\n\n    const loadAsync = async () => {\n     //   console.log('im in async func')\n        // Settings Beans\n        const beansSettingsRaw = await readSettings(beansSettingsFileName)\n        \n        if (beansSettingsRaw) {\n            beansSettings = JSON.parse(beansSettingsRaw)\n        } else {\n            beansSettings = beansDefault\n        }\n        \n        // Settings Brews\n        const brewsSettingsRaw = await readSettings(brewsSettingsFileName)\n        \n        if (brewsSettingsRaw) {\n          brewsSettings = JSON.parse(brewsSettingsRaw)\n        } else {\n          brewsSettings = brewsDefault\n        }\n\n        // Data Beans\n        const rawDataBeans = await readData(beansDataFileName)\n        beansData = createTable(rawDataBeans)\n\n        // Data Brews\n        const rawDataBrews = await readData(brewsDataFileName)\n        console.log(\"loadAsync -> rawDataBrews\", rawDataBrews)\n        \n        brewsData = createTable(rawDataBrews)\n      //  console.log('end of async func')\n        isLoaded = true\n      //  console.log('isloade', isLoaded)\n        dispatch({type: 'setBeansSettings', value: beansSettings})\n        dispatch({type: 'setBeansData', value: beansData})\n\n        dispatch({type: 'setBrewsSettings', value: brewsSettings})\n        dispatch({type: 'setBrewsData', value: brewsData})\n      //  console.log('BeansSettingsDespatch:', state.beans.settings)\n      console.log('BeansDataDespatched', state.beans.data)\n    }\n    loadAsync() \n  //  console.log('i m after async func')\n\n} , [])\n}\n\n\n"]},"metadata":{},"sourceType":"module"}