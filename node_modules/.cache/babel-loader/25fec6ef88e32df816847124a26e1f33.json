{"ast":null,"code":"import _regeneratorRuntime from\"/mnt/Data/Javascript_code/Ionic/coffee-db4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/mnt/Data/Javascript_code/Ionic/coffee-db4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useContext,useState,useEffect}from'react';import{readData,readSettings}from'./data';import{beansDefault,brewsDefault}from'../objects/default-values';import{beansSettingsFileName,beansDataFileName,brewsSettingsFileName,brewsDataFileName}from'../objects/filenames';import{createTable}from'../frontend/create-table.js';import{store}from'./store';export var LoadData=function LoadData(){var globalState=useContext(store);var state=globalState.state,dispatch=globalState.dispatch;var isLoaded=false;var beansSettings;var brewsSettings;var beansData;var brewsData;useEffect(function(){var loadAsync=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var beansSettingsRaw,brewsSettingsRaw,rawDataBeans,rawDataBrews;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return readSettings(beansSettingsFileName);case 2:beansSettingsRaw=_context.sent;if(beansSettingsRaw){beansSettings=JSON.parse(beansSettingsRaw);}else{beansSettings=beansDefault;}// Settings Brews\n_context.next=6;return readSettings(brewsSettingsFileName);case 6:brewsSettingsRaw=_context.sent;if(brewsSettingsRaw){brewsSettings=JSON.parse(brewsSettingsRaw);}else{brewsSettings=brewsDefault;}// Data Beans\n_context.next=10;return readData(beansDataFileName);case 10:rawDataBeans=_context.sent;if(rawDataBeans){beansData=createTable(rawDataBeans);}else{beansData=[];}// Data Brews\n_context.next=14;return readData(brewsDataFileName);case 14:rawDataBrews=_context.sent;if(rawDataBrews){brewsData=createTable(rawDataBrews);}else{brewsData=[];}//  console.log('end of async func')\nisLoaded=true;//  console.log('isloade', isLoaded)\ndispatch({type:'setBeansSettings',value:beansSettings});dispatch({type:'setBeansData',value:beansData});dispatch({type:'setBrewsSettings',value:brewsSettings});dispatch({type:'setBrewsData',value:brewsData});//  console.log('BeansSettingsDespatch:', state.beans.settings)\nconsole.log('BeansDataDespatched',state.beans.data);console.log('BREWS::',state.brews.settings);console.log(\"loadAsync -> brewsSettings\",brewsSettings);case 24:case\"end\":return _context.stop();}}},_callee);}));return function loadAsync(){return _ref.apply(this,arguments);};}();loadAsync();//  console.log('i m after async func')\n},[]);};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db4/src/components/backend/loadData.js"],"names":["React","useContext","useState","useEffect","readData","readSettings","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","globalState","state","dispatch","isLoaded","beansSettings","brewsSettings","beansData","brewsData","loadAsync","beansSettingsRaw","JSON","parse","brewsSettingsRaw","rawDataBeans","rawDataBrews","type","value","console","log","beans","data","brews","settings"],"mappings":"+TAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,CAAsCC,SAAtC,KAAsD,OAAtD,CAEA,OAASC,QAAT,CAAmBC,YAAnB,KAAuC,QAAvC,CACA,OAASC,YAAT,CAAuBC,YAAvB,KAA2C,2BAA3C,CACA,OAASC,qBAAT,CAAgCC,iBAAhC,CAAmDC,qBAAnD,CAA0EC,iBAA1E,KAAoG,sBAApG,CACA,OAASC,WAAT,KAA4B,6BAA5B,CACA,OAASC,KAAT,KAAsB,SAAtB,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAC1B,GAAMC,CAAAA,WAAW,CAAGd,UAAU,CAACY,KAAD,CAA9B,CAD0B,GAEnBG,CAAAA,KAFmB,CAECD,WAFD,CAEnBC,KAFmB,CAEZC,QAFY,CAECF,WAFD,CAEZE,QAFY,CAG1B,GAAIC,CAAAA,QAAQ,CAAG,KAAf,CAEA,GAAIC,CAAAA,aAAJ,CACA,GAAIC,CAAAA,aAAJ,CACA,GAAIC,CAAAA,SAAJ,CACA,GAAIC,CAAAA,SAAJ,CAEAnB,SAAS,CAAE,UAAM,CAEjB,GAAMoB,CAAAA,SAAS,0FAAG,yNAGiBlB,CAAAA,YAAY,CAACG,qBAAD,CAH7B,QAGRgB,gBAHQ,eAKd,GAAIA,gBAAJ,CAAsB,CAClBL,aAAa,CAAGM,IAAI,CAACC,KAAL,CAAWF,gBAAX,CAAhB,CACH,CAFD,IAEO,CACHL,aAAa,CAAGb,YAAhB,CACH,CAED;AAXc,sBAYiBD,CAAAA,YAAY,CAACK,qBAAD,CAZ7B,QAYRiB,gBAZQ,eAcd,GAAIA,gBAAJ,CAAsB,CACpBP,aAAa,CAAGK,IAAI,CAACC,KAAL,CAAWC,gBAAX,CAAhB,CACD,CAFD,IAEO,CACLP,aAAa,CAAGb,YAAhB,CAED,CAED;AArBc,uBAsBaH,CAAAA,QAAQ,CAACK,iBAAD,CAtBrB,SAsBRmB,YAtBQ,eAuBd,GAAIA,YAAJ,CAAkB,CAChBP,SAAS,CAAGT,WAAW,CAACgB,YAAD,CAAvB,CACD,CAFD,IAEO,CACLP,SAAS,CAAG,EAAZ,CACD,CACD;AA5Bc,uBA6BajB,CAAAA,QAAQ,CAACO,iBAAD,CA7BrB,SA6BRkB,YA7BQ,eA8Bf,GAAIA,YAAJ,CAAkB,CACfP,SAAS,CAAGV,WAAW,CAACiB,YAAD,CAAvB,CACD,CAFF,IAEQ,CACLP,SAAS,CAAG,EAAZ,CACD,CACH;AACEJ,QAAQ,CAAG,IAAX,CACF;AACED,QAAQ,CAAC,CAACa,IAAI,CAAE,kBAAP,CAA2BC,KAAK,CAAEZ,aAAlC,CAAD,CAAR,CACAF,QAAQ,CAAC,CAACa,IAAI,CAAE,cAAP,CAAuBC,KAAK,CAAEV,SAA9B,CAAD,CAAR,CAEAJ,QAAQ,CAAC,CAACa,IAAI,CAAE,kBAAP,CAA2BC,KAAK,CAAEX,aAAlC,CAAD,CAAR,CACAH,QAAQ,CAAC,CAACa,IAAI,CAAE,cAAP,CAAuBC,KAAK,CAAET,SAA9B,CAAD,CAAR,CACF;AACAU,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAmCjB,KAAK,CAACkB,KAAN,CAAYC,IAA/C,EACAH,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBjB,KAAK,CAACoB,KAAN,CAAYC,QAAnC,EACAL,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0Cb,aAA1C,EA9CgB,uDAAH,kBAATG,CAAAA,SAAS,0CAAf,CAgDAA,SAAS,GACX;AAED,CArDY,CAqDT,EArDS,CAAT,CAsDH,CAhEM","sourcesContent":["import React, { useContext, useState, useEffect} from 'react'\n\nimport { readData, readSettings } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = () => {\n    const globalState = useContext(store)\n    const {state, dispatch } = globalState\n    let isLoaded = false \n\n    let beansSettings\n    let brewsSettings\n    let beansData\n    let brewsData\n    \n    useEffect( () => {\n\n    const loadAsync = async () => {\n     //   console.log('im in async func')\n        // Settings Beans\n        const beansSettingsRaw = await readSettings(beansSettingsFileName)\n        \n        if (beansSettingsRaw) {\n            beansSettings = JSON.parse(beansSettingsRaw)\n        } else {\n            beansSettings = beansDefault\n        }\n        \n        // Settings Brews\n        const brewsSettingsRaw = await readSettings(brewsSettingsFileName)\n        \n        if (brewsSettingsRaw) {\n          brewsSettings = JSON.parse(brewsSettingsRaw)\n        } else {\n          brewsSettings = brewsDefault\n          \n        }\n\n        // Data Beans\n        const rawDataBeans = await readData(beansDataFileName)\n        if (rawDataBeans) {\n          beansData = createTable(rawDataBeans)\n        } else {\n          beansData = []\n        }\n        // Data Brews\n        const rawDataBrews = await readData(brewsDataFileName)\n       if (rawDataBrews) { \n          brewsData = createTable(rawDataBrews)\n        } else {\n          brewsData = []\n        } \n      //  console.log('end of async func')\n        isLoaded = true\n      //  console.log('isloade', isLoaded)\n        dispatch({type: 'setBeansSettings', value: beansSettings})\n        dispatch({type: 'setBeansData', value: beansData})\n\n        dispatch({type: 'setBrewsSettings', value: brewsSettings})\n        dispatch({type: 'setBrewsData', value: brewsData})\n      //  console.log('BeansSettingsDespatch:', state.beans.settings)\n      console.log('BeansDataDespatched', state.beans.data)\n      console.log('BREWS::', state.brews.settings)\n      console.log(\"loadAsync -> brewsSettings\", brewsSettings)\n    }\n    loadAsync() \n  //  console.log('i m after async func')\n\n} , [])\n}\n\n\n"]},"metadata":{},"sourceType":"module"}