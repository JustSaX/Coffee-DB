{"ast":null,"code":"import React, { useContext, useState } from 'react';\nimport { readData, readSettings } from './data';\nimport { beansDefault, brewsDefault } from '../objects/default-values';\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName } from '../objects/filenames';\nimport { createTable } from '../frontend/create-table.js';\nimport { store } from './store';\nexport const LoadData = myContext => {\n  let isLoaded = false;\n  let beansSettings;\n  let beansData;\n  const [test, setTest] = useState('blabla'); //setTest('blublu')\n\n  const loadAsync = async () => {\n    console.log('im in async func'); // Settings Beans\n\n    const beansSettingsRaw = await readSettings(beansSettingsFileName);\n\n    if (beansSettingsRaw) {\n      beansSettings = JSON.parse(beansSettingsRaw);\n    } else {\n      beansSettings = beansDefault;\n    } // Settings Brews\n    // Data Beans\n\n\n    const rawDataBeans = await readData(beansDataFileName);\n    beansData = createTable(rawDataBeans); // Data Brews\n\n    console.log('end of async func');\n    isLoaded = true;\n    console.log('isloade', isLoaded);\n  };\n\n  loadAsync();\n  console.log('i m after async func'); //while (isLoaded === false){}\n  //set global State\n  //const globalState = useContext(store) \n\n  console.log(myContext);\n  const {\n    state,\n    dispatch\n  } = myContext; //const {state, dispatch } = globalState\n  //if (isRead === false){\n\n  dispatch({\n    type: 'setBeansSettings',\n    value: beansSettings\n  });\n  dispatch({\n    type: 'setBeansData',\n    value: beansData\n  });\n  console.log('BeansSettings:', state.beans.settings); // }\n\n  return true;\n};\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db2/src/components/backend/loadData.js"],"names":["React","useContext","useState","readData","readSettings","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","myContext","isLoaded","beansSettings","beansData","test","setTest","loadAsync","console","log","beansSettingsRaw","JSON","parse","rawDataBeans","state","dispatch","type","value","beans","settings"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA2C,OAA3C;AAEA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,QAAvC;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,2BAA3C;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,EAAmDC,qBAAnD,EAA0EC,iBAA1E,QAAoG,sBAApG;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,SAAD,IAAe;AAEnC,MAAIC,QAAQ,GAAG,KAAf;AAEA,MAAIC,aAAJ;AACA,MAAIC,SAAJ;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,QAAD,CAAhC,CAPmC,CASnC;;AAEA,QAAMkB,SAAS,GAAG,YAAY;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAD0B,CAE1B;;AACA,UAAMC,gBAAgB,GAAG,MAAMnB,YAAY,CAACG,qBAAD,CAA3C;;AAEA,QAAIgB,gBAAJ,EAAsB;AAClBP,MAAAA,aAAa,GAAGQ,IAAI,CAACC,KAAL,CAAWF,gBAAX,CAAhB;AACH,KAFD,MAEO;AACHP,MAAAA,aAAa,GAAGX,YAAhB;AACH,KATyB,CAU1B;AAEA;;;AACA,UAAMqB,YAAY,GAAG,MAAMvB,QAAQ,CAACK,iBAAD,CAAnC;AACAS,IAAAA,SAAS,GAAGN,WAAW,CAACe,YAAD,CAAvB,CAd0B,CAgB1B;;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAP,IAAAA,QAAQ,GAAG,IAAX;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,QAAvB;AACH,GApBD;;AAqBAK,EAAAA,SAAS;AACTC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAjCmC,CAkCnC;AAEA;AACA;;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYR,SAAZ;AACA,QAAM;AAACa,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAqBd,SAA3B,CAvCmC,CAwCnC;AACA;;AACIc,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,kBAAP;AAA2BC,IAAAA,KAAK,EAAEd;AAAlC,GAAD,CAAR;AACAY,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,KAAK,EAAEb;AAA9B,GAAD,CAAR;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BK,KAAK,CAACI,KAAN,CAAYC,QAA1C,EA7C+B,CA8CpC;;AACC,SAAO,IAAP;AACH,CAhDM;AAwDP;;;;;;;;;;;;;;;;AAgBA","sourcesContent":["import React, { useContext, useState} from 'react'\n\nimport { readData, readSettings } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = (myContext) => {\n\n    let isLoaded = false \n\n    let beansSettings\n    let beansData\n\n    const [test, setTest] = useState('blabla')\n    \n    //setTest('blublu')\n    \n    const loadAsync = async () => {\n        console.log('im in async func')\n        // Settings Beans\n        const beansSettingsRaw = await readSettings(beansSettingsFileName)\n        \n        if (beansSettingsRaw) {\n            beansSettings = JSON.parse(beansSettingsRaw)\n        } else {\n            beansSettings = beansDefault\n        }\n        // Settings Brews\n\n        // Data Beans\n        const rawDataBeans = await readData(beansDataFileName)\n        beansData = createTable(rawDataBeans)\n\n        // Data Brews\n        console.log('end of async func')\n        isLoaded = true\n        console.log('isloade', isLoaded)\n    }\n    loadAsync() \n    console.log('i m after async func')\n    //while (isLoaded === false){}\n\n    //set global State\n    //const globalState = useContext(store) \n    console.log(myContext)\n    const {state, dispatch } = myContext\n    //const {state, dispatch } = globalState\n    //if (isRead === false){\n        dispatch({type: 'setBeansSettings', value: beansSettings})\n        dispatch({type: 'setBeansData', value: beansData})\n\n        console.log('BeansSettings:', state.beans.settings)\n   // }\n    return true\n}\n\n\n\n\n\n\n\n/*\nconst fileRead = async () => {\n    console.log('i m in fields')\n    //let fields = []\n    let fileContent =  await readSettings(fileName)\n    console.log('filecontent:', fileContent)\n    if (fileContent) {   //if filename doesn't exist readSettings will return false    \n        fields = JSON.parse(fileContent)\n        console.log('fields:', fields)\n    } else {\n        fields = beansDefault\n    }\n    return true\n} \n*/\n\n/*\nexport const ShowBeans = () => {\n\n    console.log('i load the function of show-beans')\n\n    const [data, setData] = useState([])\n    const [picArray, setPicArray] = useState([])\n    const [settings, setSettings] = useState([])\n    const [isFileRead, setIsFileRead] = useState(false)\n\n    const loadAllFileData = async () => {\n        setIsFileRead(true)\n        //load Settings\n        let fileContent =  await readSettings(settingsFileName)\n        console.log('filecontent:', fileContent)\n        if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            //settings = JSON.parse(fileContent)\n            setSettings(JSON.parse(fileContent))\n        } else {\n            setSettings(settingsDefault)\n        }   \n        // load data\n        const rawData = await readData(dataFileName)\n        const tempData = createTable(rawData)\n        console.log('tempdata type:', typeof tempData)\n        setData(tempData)\n\n        const folder = dataFileName.split('/')[0]\n        /*\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            console.log('temp',temp)\n            picArray.push(temp)\n        }\n        setPicArray(picArray)\n        \n        let tempArray = []\n        let tempPics = {}\n        for (let i=0; i<tempData.length; i++){\n            const temp = await readPicture(folder + '/' + tempData[i].id.toString() + '.jpeg')\n            tempPics[tempData[i].id]=temp\n            console.log('tempData von i',tempData[i])\n            console.log('tempPics:', tempPics)\n            //console.log('temp',temp)\n            //picArray.push(temp)\n        }\n        tempArray.push(tempPics)\n        console.log('tempArray:', tempArray)\n        setPicArray(tempArray)\n    }\n    if(isFileRead === false){loadAllFileData()}\n    console.log('SETTINGS:', settings)\n    */\n\n\n\n"]},"metadata":{},"sourceType":"module"}