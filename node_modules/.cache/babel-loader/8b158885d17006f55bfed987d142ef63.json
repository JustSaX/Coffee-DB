{"ast":null,"code":"import { IonCard, IonCardContent, IonItem, IonImg } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core'; //import { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\n//import { useStorage } from '@ionic/react-hooks/storage';\n\nimport { readPicture } from '../backend/data'; //const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n//const { get, set } = useStorage();\n// createTable returns an array containing per line an object with the stored data\n// e.g. [{id:51346431, date:02.01.2020}]\n\nexport const createTable = stringData => {\n  console.log('stringData:', stringData);\n  const stringArray = stringData.split('\\n');\n  console.log('string array:');\n  console.log(stringArray);\n  const header = Object.keys(JSON.parse(stringArray[0])); // array from all the keys\n\n  let tableData = [];\n\n  for (let i = 0; i < stringArray.length; i++) {\n    tableData.push(JSON.parse(stringArray[i]));\n  } //console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n\n\n  return tableData;\n};\nexport const picData = (array, filename) => {\n  //object contains an array with an object inside\n\n  /* Explanation what the function does:\n  1. the outer map iterates through all the objects (lines) in the array\n      and creates the same amount of Ioncards.\n  2. The variable object contains each of the single objects in array\n  3: Object.keys(object) creates an array with all the keys in object\n  4. .filter removes the key with id\n  5. map iterates through all the remaining keys and creates for each key\n      a IonCardcontent with the content key: value\n  */\n  console.log('i m in picData functin', array); //I need to add the mapping to the ID\n\n  const folder = filename.split('/')[0];\n  console.log(folder);\n  console.log('Array:', array);\n  const picArray = [];\n\n  const createPicArray = async () => {\n    for (let i = 0; i < array.length; i++) {\n      const temp = await readPicture(folder + '/' + array[i].id.toString() + '.jpeg');\n      picArray.push(temp);\n      console.log('PICARRAY', picArray[0]);\n    }\n  };\n\n  createPicArray();\n  console.log('PICARRAY22222', picArray);\n  return picArray;\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/frontend/create-table.js"],"names":["IonCard","IonCardContent","IonItem","IonImg","React","useState","useEffect","Capacitor","readPicture","createTable","stringData","console","log","stringArray","split","header","Object","keys","JSON","parse","tableData","i","length","push","picData","array","filename","folder","picArray","createPicArray","temp","id","toString"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,cAAlB,EAAkCC,OAAlC,EAA2CC,MAA3C,QAAyD,cAAzD;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,SAAT,QAA0B,iBAA1B,C,CAIA;AACA;;AAEA,SAASC,WAAT,QAA4B,iBAA5B,C,CAEA;AACA;AAOA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAIC,UAAD,IAAgB;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B;AACA,QAAMG,WAAW,GAAGH,UAAU,CAACI,KAAX,CAAiB,IAAjB,CAApB;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACA,QAAME,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,IAAI,CAACC,KAAL,CAAWN,WAAW,CAAC,CAAD,CAAtB,CAAZ,CAAf,CALuC,CAKiB;;AACxD,MAAIO,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,WAAW,CAACS,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AAC1CD,IAAAA,SAAS,CAACG,IAAV,CAAeL,IAAI,CAACC,KAAL,CAAWN,WAAW,CAACQ,CAAD,CAAtB,CAAf;AACD,GATsC,CAUzC;;;AACE,SAAOD,SAAP;AACD,CAZI;AAkBP,OAAO,MAAMI,OAAO,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAExC;;AACA;;;;;;;;;AAUAf,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCa,KAAtC,EAbwC,CAexC;;AACA,QAAME,MAAM,GAAGD,QAAQ,CAACZ,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAf;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYe,MAAZ;AACAhB,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBa,KAAtB;AAGA,QAAMG,QAAQ,GAAG,EAAjB;;AACA,QAAMC,cAAc,GAAG,YAAY;AAC/B,SAAK,IAAIR,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACI,KAAK,CAACH,MAAtB,EAA8BD,CAAC,EAA/B,EAAkC;AAC9B,YAAMS,IAAI,GAAG,MAAMtB,WAAW,CAACmB,MAAM,GAAG,GAAT,GAAeF,KAAK,CAACJ,CAAD,CAAL,CAASU,EAAT,CAAYC,QAAZ,EAAf,GAAwC,OAAzC,CAA9B;AACAJ,MAAAA,QAAQ,CAACL,IAAT,CAAcO,IAAd;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBgB,QAAQ,CAAC,CAAD,CAAhC;AACH;AACJ,GAND;;AAODC,EAAAA,cAAc;AACjBlB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,QAA7B;AACC,SAAOA,QAAP;AACA,CAhCM","sourcesContent":["import { IonCard, IonCardContent, IonItem, IonImg } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\n\nimport { Capacitor } from '@capacitor/core';\n\n\n\n//import { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\n//import { useStorage } from '@ionic/react-hooks/storage';\n\nimport { readPicture } from '../backend/data'\n\n//const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n//const { get, set } = useStorage();\n\n\n\n\n\n\n// createTable returns an array containing per line an object with the stored data\n// e.g. [{id:51346431, date:02.01.2020}]\nexport const createTable = (stringData) => {\n    console.log('stringData:', stringData)\n    const stringArray = stringData.split('\\n')\n    console.log('string array:')\n    console.log(stringArray)\n    const header = Object.keys(JSON.parse(stringArray[0]))  // array from all the keys\n    let tableData = []\n    for (let i = 0; i < stringArray.length; i++){\n      tableData.push(JSON.parse(stringArray[i])) \n    }\n  //console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n    return tableData  \n  }\n\n\n\n\n\nexport const picData = (array, filename) => {\n\n    //object contains an array with an object inside\n    /* Explanation what the function does:\n    1. the outer map iterates through all the objects (lines) in the array\n        and creates the same amount of Ioncards.\n    2. The variable object contains each of the single objects in array\n    3: Object.keys(object) creates an array with all the keys in object\n    4. .filter removes the key with id\n    5. map iterates through all the remaining keys and creates for each key\n        a IonCardcontent with the content key: value\n    */\n\n    console.log('i m in picData functin', array)\n\n    //I need to add the mapping to the ID\n    const folder = filename.split('/')[0]\n    console.log(folder)\n    console.log('Array:', array)\n\n\n    const picArray = []\n    const createPicArray = async () => {\n        for (let i=0; i<array.length; i++){\n            const temp = await readPicture(folder + '/' + array[i].id.toString() + '.jpeg')\n            picArray.push(temp)\n            console.log('PICARRAY', picArray[0])\n        }\n    }\n   createPicArray()\nconsole.log('PICARRAY22222', picArray)\n return picArray\n}\n"]},"metadata":{},"sourceType":"module"}