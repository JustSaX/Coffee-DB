{"ast":null,"code":"import { Plugins, FilesystemDirectory, FilesystemEncoding, Capacitor } from '@capacitor/core';\nimport { idCreator, dateCreator, timeCreator } from './idcreator';\nconst {\n  Filesystem\n} = Plugins;\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',\n  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8\n};\nconst fileSettingsWrite = {\n  path: '',\n  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n  recursive: true //create folders if they don't exist\n\n};\nconst fileSettingsReadPicture = {\n  path: '',\n  //path  needs to be set in each function\n  directory: FilesystemDirectory.External\n};\nconst fileSettingsWritePicture = {\n  path: '',\n  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  recursive: true //create folders if they don't exist\n\n}; //************************\n//Writing or storing Data\n//************************\n//dataset needs to be an object and not an array!\n\nexport const storeData = async (filename, dataset, photo) => {\n  const id = idCreator();\n  const date = dateCreator();\n  const time = timeCreator(); //const object = {[id]:dataset}\n\n  const object = {\n    id: id,\n    Datum: date,\n    Uhrzeit: time\n  };\n  Object.assign(object, dataset);\n  await writeFile(filename, object);\n\n  if (photo) {\n    //filename contains something like data/beans.data, split will split the string into\n    //[data, beans.data] and save data into path => [0] is the first element of the array created by split\n    const path = filename.split('/')[0];\n    const photoFilename = path + '/' + id.toString() + '.jpeg';\n    writePhoto(photoFilename, photo);\n  }\n\n  return object;\n};\n\nconst writeFile = async (filename, object) => {\n  let dataToWrite = JSON.stringify(object); //let dataToWrite = 'Hallo Android'\n  // try to open the file if it exists, append if not create it\n\n  try {\n    const ret = await Filesystem.readFile({\n      path: filename,\n      directory: FilesystemDirectory.External\n    });\n    const append = await Filesystem.appendFile({\n      path: filename,\n      data: '\\n' + dataToWrite,\n      directory: FilesystemDirectory.External,\n      encoding: FilesystemEncoding.UTF8\n    }); // console.log('file is existing')\n  } catch (e) {\n    console.log(e.message);\n\n    if (e.message.includes('File does not exist')) {\n      // File not found\n      console.log(e.message.includes('File does not exist')); // console.log('file not found')\n\n      const write = await Filesystem.writeFile({\n        path: filename,\n        data: dataToWrite,\n        directory: FilesystemDirectory.External,\n        //set back to external!\n        encoding: FilesystemEncoding.UTF8,\n        recursive: true //create folders if they don't exist\n\n      }); // console.log('new file written')\n    }\n  }\n}; //writing picture to file\n\n\nconst writePhoto = async (filename, photo) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWritePicture); //careful shwallow copy\n\n  fileSettingsWriteCopy.path = filename; //fileSettingsWriteCopy.data = photo.dataUrl\n\n  fileSettingsWriteCopy.data = photo.dataUrl;\n  fileSettingsWriteCopy.encoding = console.log(fileSettingsWriteCopy);\n  await Filesystem.writeFile(fileSettingsWriteCopy);\n  console.log('I finished writing FILE ------------* ********-----------------------');\n}; //writing settings to file, if file does exist it will be overwritten\n\n\nexport const overWriteFile = async (filename, object) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite); //careful shwallow copy\n\n  fileSettingsWriteCopy.path = filename;\n  fileSettingsWriteCopy.data = JSON.stringify(object);\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy);\n}; //************************\n//Reading Data\n//************************\n// reading data from file, if file doesn't exist return false\n\nexport const readData = async filename => {\n  let readFile = '';\n\n  try {\n    readFile = await Filesystem.readFile({\n      path: filename,\n      directory: FilesystemDirectory.External,\n      encoding: FilesystemEncoding.UTF8\n    });\n  } catch (e) {\n    return false;\n  }\n\n  return readFile.data;\n}; //reading data from File, if file doesn't exist false will be returned\n\nexport const readSettings = async filename => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead);\n  fileSettingsReadCopy.path = filename;\n  let readFile = '';\n\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy);\n  } catch (e) {\n    return false;\n  }\n\n  return readFile.data;\n};\nexport const readPicture = async filename => {\n  // console.log('read pic filename:', filename)\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsReadPicture);\n  fileSettingsReadCopy.path = filename;\n  let fileExists;\n\n  if (filename.length > 0) {\n    const filenameSplit = filename.split('/'); // console.log('filenamesplit:', filenameSplit)\n\n    const filenameNoPath = filenameSplit.pop(); // console.log('filenamenopath:', filenameNoPath)\n\n    const path = filenameSplit.map(item => '/' + item)[0];\n    const fileObj = {\n      path: path,\n      directory: fileSettingsReadCopy.directory\n    };\n    console.log(path);\n    const directoryContent = await Filesystem.readdir(fileObj); // console.log('diretorycontent:', directoryContent)\n    // console.log('type of directorycontent:', typeof directoryContent)\n\n    fileExists = directoryContent.files.includes(filenameNoPath); //will return index or undefined\n  } //const showDir = Filesystem.readdir({path: '/data', directory: FilesystemDirectory.External})\n  // //console.log('directory content:', showDir)\n\n\n  let readPicData;\n\n  if (fileExists) {\n    try {\n      readPicData = await Filesystem.getUri(fileSettingsReadCopy); // console.log('readPic1:',readPicData)\n    } catch (e) {\n      // console.log('readpic error:', e)\n      return false;\n    }\n\n    readPicData = Capacitor.convertFileSrc(readPicData.uri);\n  } else readPicData = false; //let photoPath = Capacitor.convertFileSrc(finalPhotoUri.uri)\n\n\n  return readPicData;\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db4/src/components/backend/data.js"],"names":["Plugins","FilesystemDirectory","FilesystemEncoding","Capacitor","idCreator","dateCreator","timeCreator","Filesystem","fileSettingsRead","path","directory","External","encoding","UTF8","fileSettingsWrite","data","recursive","fileSettingsReadPicture","fileSettingsWritePicture","storeData","filename","dataset","photo","id","date","time","object","Datum","Uhrzeit","Object","assign","writeFile","split","photoFilename","toString","writePhoto","dataToWrite","JSON","stringify","ret","readFile","append","appendFile","e","console","log","message","includes","write","fileSettingsWriteCopy","dataUrl","overWriteFile","readData","readSettings","fileSettingsReadCopy","readPicture","fileExists","length","filenameSplit","filenameNoPath","pop","map","item","fileObj","directoryContent","readdir","files","readPicData","getUri","convertFileSrc","uri"],"mappings":"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","sourcesContent":["\nimport { Plugins, FilesystemDirectory, FilesystemEncoding, Capacitor } from '@capacitor/core'\nimport { idCreator, dateCreator, timeCreator } from './idcreator'\n\n\nconst { Filesystem } = Plugins\n\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n}\n\nconst fileSettingsWrite= {\n  path: '',  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n  recursive: true    //create folders if they don't exist\n}\n\nconst fileSettingsReadPicture = {\n  path: '',  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n}\n\nconst fileSettingsWritePicture = {\n  path: '',  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  recursive: true    //create folders if they don't exist\n}\n\n\n//************************\n//Writing or storing Data\n//************************\n\n\n//dataset needs to be an object and not an array!\nexport const storeData = async (filename, dataset, photo) => {\n   const id = idCreator()\n   const date = dateCreator()\n   const time = timeCreator()\n\n    //const object = {[id]:dataset}\n   const object = {id: id,\n                  Datum: date,\n                  Uhrzeit: time}\n   Object.assign(object, dataset)\n\n  await writeFile(filename, object)\n\n  if(photo) {\n    //filename contains something like data/beans.data, split will split the string into\n    //[data, beans.data] and save data into path => [0] is the first element of the array created by split\n    const path = filename.split('/')[0]\n    const photoFilename = path +'/'+ id.toString() +'.jpeg'\n    writePhoto(photoFilename, photo)\n  }\n\nreturn object\n} \n\nconst writeFile = async (filename, object) => {\n    let dataToWrite = JSON.stringify(object)\n    //let dataToWrite = 'Hallo Android'\n    // try to open the file if it exists, append if not create it\n    try {\n        const ret = await Filesystem.readFile({\n          path: filename,\n          directory: FilesystemDirectory.External\n        })\n        const append = await Filesystem.appendFile({\n            path: filename,\n            data: '\\n'+ dataToWrite,\n            directory: FilesystemDirectory.External,\n            encoding: FilesystemEncoding.UTF8,\n        })\n        // console.log('file is existing')\n      } catch (e) {\n        console.log(e.message)\n        if (e.message.includes('File does not exist')){\n        // File not found\n          console.log(e.message.includes('File does not exist'))\n          // console.log('file not found')\n          const write = await Filesystem.writeFile({\n              path: filename,\n              data: dataToWrite,\n              directory: FilesystemDirectory.External,  //set back to external!\n              encoding: FilesystemEncoding.UTF8,\n              recursive: true    //create folders if they don't exist\n         })\n         // console.log('new file written')\n        }\n     }\n}\n\n\n//writing picture to file\nconst writePhoto = async (filename, photo) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWritePicture) //careful shwallow copy\n  fileSettingsWriteCopy.path = filename\n  //fileSettingsWriteCopy.data = photo.dataUrl\n  fileSettingsWriteCopy.data = photo.dataUrl\n  fileSettingsWriteCopy.encoding = \n  console.log(fileSettingsWriteCopy)\n  await Filesystem.writeFile(fileSettingsWriteCopy)\n  console.log('I finished writing FILE ------------* ********-----------------------')\n}\n\n\n//writing settings to file, if file does exist it will be overwritten\nexport const overWriteFile = async (filename, object) => {\n let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite) //careful shwallow copy\n  fileSettingsWriteCopy.path = filename\n  fileSettingsWriteCopy.data = JSON.stringify(object)\n\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy)\n}\n\n//************************\n//Reading Data\n//************************\n\n// reading data from file, if file doesn't exist return false\nexport const readData = async (filename) => {\n  let readFile = ''\n  try {\n  readFile = await Filesystem.readFile({\n    path: filename,\n    directory: FilesystemDirectory.External,\n    encoding: FilesystemEncoding.UTF8\n  })\n} catch (e){\n  return false\n}\n  return readFile.data\n  }\n\n\n\n//reading data from File, if file doesn't exist false will be returned\nexport const readSettings = async (filename) => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead)\n  fileSettingsReadCopy.path = filename\n  let readFile = ''\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy)\n  } catch(e){\n    return false\n  }\n  return readFile.data\n}\n\n\n\n  \nexport const readPicture = async (filename) => {\n    // console.log('read pic filename:', filename)\n\n    let fileSettingsReadCopy = Object.assign({}, fileSettingsReadPicture)\n    fileSettingsReadCopy.path = filename\n    \n    let fileExists\n    if (filename.length > 0){\n      const filenameSplit = filename.split('/')\n      // console.log('filenamesplit:', filenameSplit)\n      const filenameNoPath = filenameSplit.pop()\n      // console.log('filenamenopath:', filenameNoPath)\n      const path = filenameSplit.map( item => '/'+item)[0]\n      \n      const fileObj = {\n        path: path,\n        directory: fileSettingsReadCopy.directory\n      }\n      console.log(path)\n      const directoryContent = await Filesystem.readdir(fileObj)\n      // console.log('diretorycontent:', directoryContent)\n      // console.log('type of directorycontent:', typeof directoryContent)\n      \n        fileExists = directoryContent.files.includes(filenameNoPath)\n        //will return index or undefined\n    }\n\n    //const showDir = Filesystem.readdir({path: '/data', directory: FilesystemDirectory.External})\n    // //console.log('directory content:', showDir)\n\n    let readPicData\n    if (fileExists){  \n      try {\n        readPicData = await Filesystem.getUri(fileSettingsReadCopy)\n        // console.log('readPic1:',readPicData)\n      } catch(e){\n        // console.log('readpic error:', e)\n        return false\n      }\n      readPicData = Capacitor.convertFileSrc(readPicData.uri)\n    } else readPicData = false\n    //let photoPath = Capacitor.convertFileSrc(finalPhotoUri.uri)\n    return readPicData\n}\n"]},"metadata":{},"sourceType":"module"}