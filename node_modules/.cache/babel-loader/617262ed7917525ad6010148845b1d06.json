{"ast":null,"code":"var _jsxFileName = \"/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/frontend/sort-items.js\";\nimport React from 'react';\nimport { IonItem, IonReorder, IonReorderGroup, IonItemDivider, IonCheckbox, IonGrid, IonRow, IonCol, IonLabel, IonContent, IonButton, IonIcon, IonButtons, IonInput, IonTextarea } from '@ionic/react';\nimport { trash, save, close, addCircle } from 'ionicons/icons';\nimport { useState, useReducer } from 'react';\nimport { delimiter } from 'path';\nimport { readSettings, overWriteFile } from '../backend/data';\nimport { read } from 'fs';\nconst fields = [['Bohne', true], ['RÃ¶ster', true], ['Kommentar', false]];\nconst fileName = 'data/beans-settings.data';\nlet isFileRead = false;\nexport const SortItems = () => {\n  const [ignored, forceUpdate] = useReducer(x => x + 1, 0); // this function will force an updated of the dom\n\n  const [items, setItems] = useState(fields); // const [tempItems, setTempItems] = useState(['banane'])\n\n  const [tempItem, setTempItem] = useState('');\n\n  const fileRead = async () => {\n    if (!isFileRead) {\n      let fileContent = await readSettings(fileName);\n\n      if (fileContent) {\n        //if filename doesn't exist readSettings will return false    \n        setItems(JSON.parse(fileContent));\n        isFileRead = true;\n      } else {\n        setItems(fields);\n      }\n    }\n  };\n\n  fileRead(); //will be alway loaded the page is opened, or on every rerender? Dangerous if rerender!\n\n  const fileSave = async (fileName, object) => {\n    await overWriteFile(fileName, object);\n  };\n\n  const addItem = (newItem, arrayOfItems) => {\n    //const tempVar = items\n    arrayOfItems.push([newItem, true]);\n    setItems(arrayOfItems);\n    setTempItem('');\n    console.log(items);\n  };\n  /*\n  const reorder = (oldIndex, newIndex, arrayToOrder) => {\n      \n      //let newItems = [...arrayToOrder]\n      let newItems = Array.from(arrayToOrder)  //copies the array all levels deep (not shallow)\n      console.log(items)\n      console.log('arrayToOrder')\n     // console.log(arrayToOrder)\n      console.log('new Items')\n      console.log(newItems)\n      \n  \n     // debugger\n      if(oldIndex < newIndex){\n          newItems.splice(newIndex+1, 0, newItems[oldIndex])\n              console.log('splice start')\n              console.log(newItems)\n          newItems.splice(oldIndex, 1)\n              console.log(newItems)\n              console.log('splice finished')\n      } else if (oldIndex > newIndex) {\n          newItems.splice(newIndex, 0, newItems[oldIndex])\n              console.log('splice start')\n              console.log(newItems)\n          newItems.splice(oldIndex + 1, 1)\n              console.log(newItems)\n              console.log('splice finished')\n      } \n  \n      setTempItems(newItems)\n      console.log('TemPITEMS')\n      console.log(tempItems)\n      //debugger   \n      console.log(newItems)\n  } */\n  // copied from the documentation:\n\n\n  function doReorder(itemsSort, event) {\n    // The `from` and `to` properties contain the index of the item\n    // when the drag started and ended, respectively\n    console.log('Dragged from index', event.detail.from, 'to', event.detail.to); // Finish the reorder and position the item in the DOM based on\n    // where the gesture ended. This method can also be called directly\n    // by the reorder group\n    //event.detail.complete();\n    //event.detail.complete(true);\n\n    const newIndex = event.detail.to;\n    const oldIndex = event.detail.from; //let newItems = [...itemsSort]\n\n    console.log('before:', itemsSort);\n    itemsSort = event.detail.complete(itemsSort);\n    console.log('after:', itemsSort);\n    setItems(itemsSort); //reorder(oldIndex, newIndex, itemsSort)\n  }\n\n  const delItem = (index, arrayToDeleteFrom) => {\n    arrayToDeleteFrom.splice(index, 1);\n    setItems(arrayToDeleteFrom);\n    forceUpdate();\n  };\n\n  const checkBox = (index, state, arrayToCheck) => {\n    arrayToCheck[index][1] = state;\n    setItems(arrayToCheck);\n    console.log(items);\n  };\n\n  const displayItems = itemsToDisplay => {\n    //fields needs to be read from file and handed over to function\n    const result = itemsToDisplay.map((arrayItem, index) => /*#__PURE__*/React.createElement(IonItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(IonCheckbox, {\n      slot: \"start\",\n      color: \"light\",\n      checked: arrayItem[1],\n      name: index,\n      onIonChange: e => checkBox(e.target.name, e.detail.checked, items),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(IonLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, arrayItem[0]), /*#__PURE__*/React.createElement(IonButton, {\n      color: \"light\",\n      name: index,\n      onClick: e => delItem(e.target.name, items),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }\n    }, \" \", /*#__PURE__*/React.createElement(IonIcon, {\n      icon: trash,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(IonReorder, {\n      slot: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    })));\n    return result;\n  };\n\n  return /*#__PURE__*/React.createElement(IonContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonLabel, {\n    slot: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, \"Anzeigen\"), /*#__PURE__*/React.createElement(IonLabel, {\n    slot: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Reihenfolge\")), /*#__PURE__*/React.createElement(IonReorderGroup, {\n    disabled: false,\n    onIonItemReorder: e => doReorder(items, e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, displayItems(items)), /*#__PURE__*/React.createElement(IonItem, {\n    class: \"ion-padding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IonInput, {\n    background: \"light\",\n    placeholder: \"Feld hinzuf\\xFCgen\",\n    onIonChange: e => setTempItem(e.detail.value),\n    value: tempItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonButton, {\n    color: \"light\",\n    onClick: () => addItem(tempItem, items),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    slot: \"icon-only\",\n    icon: addCircle,\n    size: \"default\",\n    color: \"dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(IonGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(IonCol, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 30\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    color: \"light\",\n    class: \"ion-text-capitalize\",\n    shape: \"round\",\n    size: \"default\",\n    routerLink: \"./Home\",\n    onClick: () => fileSave(fileName, items),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    icon: save,\n    slot: \"start\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 22\n    }\n  }), \"Speichern\")), /*#__PURE__*/React.createElement(IonCol, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonButton, {\n    color: \"light\",\n    class: \"ion-text-capitalize\",\n    shape: \"round\",\n    asdfa: true,\n    routerLink: \"./Home\",\n    onClick: isFileRead = false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IonIcon, {\n    icon: close,\n    slot: \"start\",\n    size: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 22\n    }\n  }), \"Abbrechen\")))));\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/frontend/sort-items.js"],"names":["React","IonItem","IonReorder","IonReorderGroup","IonItemDivider","IonCheckbox","IonGrid","IonRow","IonCol","IonLabel","IonContent","IonButton","IonIcon","IonButtons","IonInput","IonTextarea","trash","save","close","addCircle","useState","useReducer","delimiter","readSettings","overWriteFile","read","fields","fileName","isFileRead","SortItems","ignored","forceUpdate","x","items","setItems","tempItem","setTempItem","fileRead","fileContent","JSON","parse","fileSave","object","addItem","newItem","arrayOfItems","push","console","log","doReorder","itemsSort","event","detail","from","to","newIndex","oldIndex","complete","delItem","index","arrayToDeleteFrom","splice","checkBox","state","arrayToCheck","displayItems","itemsToDisplay","result","map","arrayItem","e","target","name","checked","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { IonItem, IonReorder, IonReorderGroup, IonItemDivider, IonCheckbox, IonGrid, IonRow, IonCol,\n    IonLabel, IonContent, IonButton, IonIcon, IonButtons, IonInput, IonTextarea } from '@ionic/react'\n\nimport { trash, save, close, addCircle } from 'ionicons/icons'\n\nimport { useState, useReducer } from 'react'\nimport { delimiter } from 'path'\n\nimport { readSettings, overWriteFile } from '../backend/data'\nimport { read } from 'fs'\n\n\nconst fields = [\n    ['Bohne', true],\n    ['RÃ¶ster', true],\n    ['Kommentar', false]]\n\nconst fileName = 'data/beans-settings.data'\n                \nlet isFileRead = false\n\nexport const SortItems = () => {\n\n    const [ignored, forceUpdate] = useReducer(x => x + 1, 0) // this function will force an updated of the dom\n    const [items, setItems] = useState(fields)\n    // const [tempItems, setTempItems] = useState(['banane'])\n     const [tempItem, setTempItem] = useState('')\n\n     const fileRead = async () => {\n        if (!isFileRead){\n            let fileContent = await readSettings(fileName)\n            if (fileContent) {   //if filename doesn't exist readSettings will return false    \n            setItems(JSON.parse(fileContent))\n            isFileRead = true\n            } else {\n                setItems(fields)\n            }\n        }\n    }\n\n    fileRead()  //will be alway loaded the page is opened, or on every rerender? Dangerous if rerender!\n    \n    const fileSave = async (fileName, object) => {\n        await overWriteFile(fileName, object)\n    }\n\n\n    \n\n    const addItem = (newItem, arrayOfItems) => {\n        //const tempVar = items\n        arrayOfItems.push([newItem, true])\n        setItems(arrayOfItems)\n        setTempItem('')\n        console.log(items)\n\n    }\n\n/*\nconst reorder = (oldIndex, newIndex, arrayToOrder) => {\n    \n    //let newItems = [...arrayToOrder]\n    let newItems = Array.from(arrayToOrder)  //copies the array all levels deep (not shallow)\n    console.log(items)\n    console.log('arrayToOrder')\n   // console.log(arrayToOrder)\n    console.log('new Items')\n    console.log(newItems)\n    \n\n   // debugger\n    if(oldIndex < newIndex){\n        newItems.splice(newIndex+1, 0, newItems[oldIndex])\n            console.log('splice start')\n            console.log(newItems)\n        newItems.splice(oldIndex, 1)\n            console.log(newItems)\n            console.log('splice finished')\n    } else if (oldIndex > newIndex) {\n        newItems.splice(newIndex, 0, newItems[oldIndex])\n            console.log('splice start')\n            console.log(newItems)\n        newItems.splice(oldIndex + 1, 1)\n            console.log(newItems)\n            console.log('splice finished')\n    } \n\n    setTempItems(newItems)\n    console.log('TemPITEMS')\n    console.log(tempItems)\n    //debugger   \n    console.log(newItems)\n} */\n\n// copied from the documentation:\n    function doReorder(itemsSort, event) {\n\n        // The `from` and `to` properties contain the index of the item\n        // when the drag started and ended, respectively\n        console.log('Dragged from index', event.detail.from, 'to', event.detail.to);\n        // Finish the reorder and position the item in the DOM based on\n        // where the gesture ended. This method can also be called directly\n        // by the reorder group\n        //event.detail.complete();\n        //event.detail.complete(true);\n        const newIndex = event.detail.to\n        const oldIndex = event.detail.from\n        //let newItems = [...itemsSort]\n        \n        console.log('before:', itemsSort)\n\n        itemsSort = event.detail.complete(itemsSort);\n\n        console.log('after:', itemsSort)\n        setItems(itemsSort)\n        //reorder(oldIndex, newIndex, itemsSort)\n    }\n    const delItem = (index, arrayToDeleteFrom) => {\n        arrayToDeleteFrom.splice(index, 1)\n        setItems(arrayToDeleteFrom)\n        forceUpdate()\n    }\n\n    const checkBox = (index, state, arrayToCheck) => {\n        arrayToCheck[index][1]=state\n        setItems(arrayToCheck)\n        console.log(items)\n    }\n\n\n    const displayItems = (itemsToDisplay) => {\n\n        //fields needs to be read from file and handed over to function\n    const result = itemsToDisplay.map((arrayItem, index) => \n        <IonItem>\n            <IonCheckbox slot='start' color='light' checked={arrayItem[1]}\n                    name={index}\n                    onIonChange={ e => checkBox(e.target.name, e.detail.checked, items) }/>\n            <IonLabel>{arrayItem[0]}</IonLabel>\n            <IonButton color='light'\n                        name={index}\n                        onClick={ e => delItem(e.target.name, items)}\n                        > <IonIcon icon={trash}/></IonButton>\n            <IonReorder slot='end'/>\n        </IonItem>\n        )\n    return result\n}\n\n\n    return (\n        <IonContent>\n            <IonItem>\n                <IonLabel slot='start'>Anzeigen</IonLabel>\n                <IonLabel slot='end'>Reihenfolge</IonLabel>\n            </IonItem>\n            \n            <IonReorderGroup disabled={false}  onIonItemReorder={ (e) => doReorder(items, e)}>\n                {displayItems(items)}\n            </IonReorderGroup>\n        \n        <IonItem class='ion-padding'>\n            <IonInput background='light'\n                    placeholder='Feld hinzufÃ¼gen'\n                    onIonChange={e => setTempItem(e.detail.value)} value={tempItem}></IonInput>\n            <IonButton color='light'  \n                    onClick={() => addItem(tempItem,items)}>\n                    <IonIcon slot='icon-only' icon={addCircle} size='default' color='dark'/>\n                    </IonButton>\n        </IonItem>\n\n            <IonGrid><IonRow><IonCol>\n            <IonButton color='light'\n                    class=\"ion-text-capitalize\"\n                    shape='round'\n                    size='default'\n                    routerLink='./Home'\n                    onClick={() => fileSave(fileName, items)}\n                    ><IonIcon icon={save} slot='start'size='large'/>Speichern</IonButton>\n            </IonCol>\n            <IonCol>          \n            <IonButton color='light'\n                    class=\"ion-text-capitalize\"\n                    shape='round'asdfa\n                    routerLink='./Home'\n                    onClick={isFileRead = false}\n                    ><IonIcon icon={close} slot='start' size='large'/>Abbrechen</IonButton>\n            </IonCol></IonRow></IonGrid>\n        </IonContent>\n          \n\n    )\n}"]},"metadata":{},"sourceType":"module"}