{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport { readData, readSettings, readPicture } from './data';\nimport { beansDefault, brewsDefault } from '../objects/default-values';\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName } from '../objects/filenames';\nimport { createTable } from '../frontend/create-table.js';\nimport { store } from './store';\nexport const LoadData = () => {\n  const globalState = useContext(store);\n  const {\n    state,\n    dispatch\n  } = globalState; //let isLoaded = false \n\n  let beansSettings;\n  let brewsSettings;\n  let beansData;\n  let brewsData;\n  let beansPics = [];\n  let brewsPics = [];\n  const folder = beansDataFileName.split('/')[0];\n  useEffect(() => {\n    const loadAsync = async () => {\n      // Settings Beans\n      const beansSettingsRaw = await readSettings(beansSettingsFileName);\n\n      if (beansSettingsRaw) {\n        beansSettings = JSON.parse(beansSettingsRaw);\n      } else {\n        beansSettings = beansDefault;\n      } // Settings Brews\n\n\n      const brewsSettingsRaw = await readSettings(brewsSettingsFileName);\n\n      if (brewsSettingsRaw) {\n        brewsSettings = JSON.parse(brewsSettingsRaw);\n      } else {\n        brewsSettings = brewsDefault;\n      } // Data Beans\n\n\n      const rawDataBeans = await readData(beansDataFileName);\n\n      if (rawDataBeans) {\n        beansData = createTable(rawDataBeans);\n      } else {\n        beansData = [];\n      } // Data Brews\n\n\n      const rawDataBrews = await readData(brewsDataFileName);\n\n      if (rawDataBrews) {\n        brewsData = createTable(rawDataBrews);\n      } else {\n        brewsData = [];\n      } // Pics Beans\n\n\n      if (beansData.length > 0) {\n        // I need an else here\n        let tempBeansPics = {};\n\n        for (let i = 0; i < beansData.length; i++) {\n          const temp = await readPicture(folder + '/' + beansData[i].id.toString() + '.jpeg');\n          tempBeansPics[beansData[i].id] = temp;\n        }\n\n        if (Object.keys(tempBeansPics).length > 0) {\n          beansPics.push(tempBeansPics);\n        }\n      } else {\n        beansPics.push({});\n      } // Pics Brews\n\n\n      if (brewsData.length > 0) {\n        let tempBrewsPics = {};\n\n        for (let i = 0; i < brewsData.length; i++) {\n          const temp = await readPicture(folder + '/' + brewsData[i].id.toString() + '.jpeg');\n          tempBrewsPics[brewsData[i].id] = temp;\n        }\n\n        if (Object.keys(tempBrewsPics).length > 0) {\n          brewsPics.push(tempBrewsPics);\n        }\n      } else {\n        brewsPics.push({});\n      } //isLoaded = true\n\n\n      dispatch({\n        type: 'setBeansSettings',\n        value: beansSettings\n      });\n      dispatch({\n        type: 'setBeansData',\n        value: beansData\n      });\n      dispatch({\n        type: 'setBeansPics',\n        value: beansPics\n      });\n      dispatch({\n        type: 'setBrewsSettings',\n        value: brewsSettings\n      });\n      dispatch({\n        type: 'setBrewsData',\n        value: brewsData\n      });\n      dispatch({\n        type: 'setBrewsPics',\n        value: brewsPics\n      });\n    };\n\n    loadAsync();\n  }, []);\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffee-db4/src/components/backend/loadData.js"],"names":["useContext","useEffect","readData","readSettings","readPicture","beansDefault","brewsDefault","beansSettingsFileName","beansDataFileName","brewsSettingsFileName","brewsDataFileName","createTable","store","LoadData","globalState","state","dispatch","beansSettings","brewsSettings","beansData","brewsData","beansPics","brewsPics","folder","split","loadAsync","beansSettingsRaw","JSON","parse","brewsSettingsRaw","rawDataBeans","rawDataBrews","length","tempBeansPics","i","temp","id","toString","Object","keys","push","tempBrewsPics","type","value"],"mappings":"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","sourcesContent":["import { useContext, useEffect} from 'react'\n\nimport { readData, readSettings, readPicture } from './data'\nimport { beansDefault, brewsDefault } from '../objects/default-values'\nimport { beansSettingsFileName, beansDataFileName, brewsSettingsFileName, brewsDataFileName  } from '../objects/filenames'\nimport { createTable } from '../frontend/create-table.js'\nimport { store } from './store'\n\nexport const LoadData = () => {\n    const globalState = useContext(store)\n    const {state, dispatch } = globalState\n   //let isLoaded = false \n\n    let beansSettings\n    let brewsSettings\n    let beansData\n    let brewsData\n    let beansPics = []\n    let brewsPics = []\n    \n    const folder = beansDataFileName.split('/')[0]\n\n    \n    useEffect( () => {\n\n    const loadAsync = async () => {\n\n        // Settings Beans\n        const beansSettingsRaw = await readSettings(beansSettingsFileName)\n        \n        if (beansSettingsRaw) {\n            beansSettings = JSON.parse(beansSettingsRaw)\n        } else {\n            beansSettings = beansDefault\n        }\n        \n        // Settings Brews\n        const brewsSettingsRaw = await readSettings(brewsSettingsFileName)\n        \n        if (brewsSettingsRaw) {\n          brewsSettings = JSON.parse(brewsSettingsRaw)\n        } else {\n          brewsSettings = brewsDefault\n          \n        }\n\n        // Data Beans\n        const rawDataBeans = await readData(beansDataFileName)\n        if (rawDataBeans) {\n          beansData = createTable(rawDataBeans)\n        } else {\n          beansData = []\n        }\n        // Data Brews\n        const rawDataBrews = await readData(brewsDataFileName)\n       if (rawDataBrews) { \n          brewsData = createTable(rawDataBrews)\n        } else {\n          brewsData = []\n        }\n\n        // Pics Beans\n        if(beansData.length > 0){  // I need an else here\n          let tempBeansPics = {}\n          for (let i=0; i<beansData.length; i++){\n            const temp = await readPicture(folder + '/' + beansData[i].id.toString() + '.jpeg')\n\n            tempBeansPics[beansData[i].id]=temp\n\n          }\n          if(Object.keys(tempBeansPics).length > 0){\n            beansPics.push(tempBeansPics)\n          }\n        } else {\n          beansPics.push({})\n        }\n        // Pics Brews\n        if(brewsData.length > 0){\n          let tempBrewsPics = {}\n          for (let i=0; i<brewsData.length; i++){\n            const temp = await readPicture(folder + '/' + brewsData[i].id.toString() + '.jpeg')\n            tempBrewsPics[brewsData[i].id]=temp\n\n          }\n\n          if(Object.keys(tempBrewsPics).length > 0){\n            brewsPics.push(tempBrewsPics)\n\n          }\n        } else {\n          brewsPics.push({})\n        }\n\n        //isLoaded = true\n        \n        dispatch({type: 'setBeansSettings', value: beansSettings})\n        dispatch({type: 'setBeansData', value: beansData})\n        dispatch({type: 'setBeansPics', value: beansPics})\n\n        dispatch({type: 'setBrewsSettings', value: brewsSettings})\n        dispatch({type: 'setBrewsData', value: brewsData})\n        dispatch({type: 'setBrewsPics', value: brewsPics})\n    }\n    loadAsync() \n\n} , [])\n}\n\n\n"]},"metadata":{},"sourceType":"module"}