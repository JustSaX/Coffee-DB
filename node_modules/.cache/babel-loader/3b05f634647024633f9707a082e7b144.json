{"ast":null,"code":"import { Plugins, FilesystemDirectory, FilesystemEncoding } from '@capacitor/core';\nimport { idCreator } from './idcreator';\nimport { trendingDown } from 'ionicons/icons';\nconst {\n  Filesystem\n} = Plugins;\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',\n  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8\n};\nconst fileSettingsWrite = {\n  path: '',\n  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8\n}; //************************\n//Writing or storing Data\n//************************\n\nexport const storeData = async (filename, dataset) => {\n  const id = idCreator(); //const object = {[id]:dataset}\n\n  const object = {\n    id: id\n  };\n  Object.assign(object, dataset);\n  await writeFile(filename, object);\n  return;\n};\n\nconst writeFile = async (filename, object) => {\n  let dataToWrite = JSON.stringify(object); //let dataToWrite = 'Hallo Android'\n  // try to open the file if it it exists, append if not create it\n\n  try {\n    const ret = await Filesystem.readFile({\n      path: filename,\n      directory: FilesystemDirectory.External\n    });\n    const append = await Filesystem.appendFile({\n      path: filename,\n      data: '\\n' + dataToWrite,\n      directory: FilesystemDirectory.External,\n      encoding: FilesystemEncoding.UTF8\n    });\n    console.log('file is existing');\n  } catch (e) {\n    console.log(e.message);\n\n    if (e.message.includes('File does not exist')) {\n      // File not found\n      console.log(e.message.includes('File does not exist'));\n      console.log('file not found');\n      const write = await Filesystem.writeFile({\n        path: filename,\n        data: dataToWrite,\n        directory: FilesystemDirectory.External,\n        //set back to external!\n        encoding: FilesystemEncoding.UTF8 //recursive: true    //create folders if they don't exist\n\n      });\n      console.log('new file written');\n    }\n  }\n}; //writing Data to file, if file does exist it will be overwritten\n\n\nexport const overWriteFile = async (filename, object) => {\n  let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite); //careful shwallow copy\n\n  fileSettingsWriteCopy.path = filename;\n  fileSettingsWriteCopy.data = JSON.stringify(object);\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy);\n}; //************************\n//Reading Data\n//************************\n// reading data from file, without check if file exists\n\nexport const readData = async filename => {\n  const readFile = await Filesystem.readFile({\n    path: filename,\n    directory: FilesystemDirectory.External,\n    encoding: FilesystemEncoding.UTF8\n  });\n  return readFile.data;\n};\nexport const createTable = stringData => {\n  console.log(stringData);\n  const stringArray = stringData.split('\\n');\n  console.log('string array:');\n  console.log(stringArray);\n  const header = Object.keys(JSON.parse(stringArray[0])); // array from all the keys\n\n  let tableData = [];\n\n  for (let i = 0; i < stringArray.length; i++) {\n    tableData.push(JSON.parse(stringArray[i]));\n  } //console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n\n\n  return [header, tableData];\n}; //reading data from File, if file doesn't exist error will be returned\n\nexport const readSettings = async filename => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead);\n  fileSettingsReadCopy.path = filename;\n  let readFile = '';\n\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy);\n  } catch (e) {\n    return false;\n  }\n\n  return readFile.data;\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/backend/data.js"],"names":["Plugins","FilesystemDirectory","FilesystemEncoding","idCreator","trendingDown","Filesystem","fileSettingsRead","path","directory","External","encoding","UTF8","fileSettingsWrite","data","storeData","filename","dataset","id","object","Object","assign","writeFile","dataToWrite","JSON","stringify","ret","readFile","append","appendFile","console","log","e","message","includes","write","overWriteFile","fileSettingsWriteCopy","readData","createTable","stringData","stringArray","split","header","keys","parse","tableData","i","length","push","readSettings","fileSettingsReadCopy"],"mappings":"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","sourcesContent":["\nimport { Plugins, FilesystemDirectory, FilesystemEncoding } from '@capacitor/core'\nimport { idCreator } from './idcreator'\nimport { trendingDown } from 'ionicons/icons'\n\nconst { Filesystem } = Plugins\n\n/*\nlet beansColHeader = ['id', 'Bohne', 'Röster', 'Kommentar']\n\nlet ds = {'Bohne': 'Malabar', 'Röster': 'Kaffeepur', 'Kommentar': 'keiner'}\nlet filename = 'beans'\n*/\n\nconst fileSettingsRead = {\n  path: '',  //path  needs to be set in each function\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n}\n\nconst fileSettingsWrite= {\n  path: '',  //path and data needs to be set in each function\n  data: '',\n  directory: FilesystemDirectory.External,\n  encoding: FilesystemEncoding.UTF8,\n}\n\n//************************\n//Writing or storing Data\n//************************\n\n\nexport const storeData = async (filename, dataset) => {\n   const id = idCreator()\n\n    //const object = {[id]:dataset}\n   const object = {id: id}\n   Object.assign(object, dataset)\n\n  await writeFile(filename, object)\nreturn\n} \nconst writeFile = async (filename, object) => {\n    let dataToWrite = JSON.stringify(object)\n    //let dataToWrite = 'Hallo Android'\n    // try to open the file if it it exists, append if not create it\n    try {\n        const ret = await Filesystem.readFile({\n          path: filename,\n          directory: FilesystemDirectory.External\n        })\n        const append = await Filesystem.appendFile({\n            path: filename,\n            data: '\\n'+ dataToWrite,\n            directory: FilesystemDirectory.External,\n            encoding: FilesystemEncoding.UTF8,\n        })\n        console.log('file is existing')\n      } catch (e) {\n        console.log(e.message)\n        if (e.message.includes('File does not exist')){\n        // File not found\n          console.log(e.message.includes('File does not exist'))\n          console.log('file not found')\n          const write = await Filesystem.writeFile({\n              path: filename,\n              data: dataToWrite,\n              directory: FilesystemDirectory.External,  //set back to external!\n              encoding: FilesystemEncoding.UTF8,\n              //recursive: true    //create folders if they don't exist\n         })\n         console.log('new file written')\n        }\n     }\n}\n\n\n//writing Data to file, if file does exist it will be overwritten\nexport const overWriteFile = async (filename, object) => {\n let fileSettingsWriteCopy = Object.assign({}, fileSettingsWrite) //careful shwallow copy\n  fileSettingsWriteCopy.path = filename\n  fileSettingsWriteCopy.data = JSON.stringify(object)\n\n  const write = await Filesystem.writeFile(fileSettingsWriteCopy)\n}\n\n//************************\n//Reading Data\n//************************\n\n// reading data from file, without check if file exists\nexport const readData = async (filename) => {\n  const readFile = await Filesystem.readFile({\n    path: filename,\n    directory: FilesystemDirectory.External,\n    encoding: FilesystemEncoding.UTF8\n  })\n  return readFile.data\n  }\n\nexport const createTable = (stringData) => {\n  console.log(stringData)\n  const stringArray = stringData.split('\\n')\n  console.log('string array:')\n  console.log(stringArray)\n  const header = Object.keys(JSON.parse(stringArray[0]))  // array from all the keys\n  let tableData = []\n  for (let i = 0; i < stringArray.length; i++){\n    tableData.push(JSON.parse(stringArray[i])) \n  }\n//console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n  return [header, tableData]  \n}\n\n//reading data from File, if file doesn't exist error will be returned\nexport const readSettings = async (filename) => {\n  let fileSettingsReadCopy = Object.assign({}, fileSettingsRead)\n  fileSettingsReadCopy.path = filename\n  let readFile = ''\n  try {\n    readFile = await Filesystem.readFile(fileSettingsReadCopy)\n  } catch(e){\n    return false\n  }\n  return readFile.data\n}"]},"metadata":{},"sourceType":"module"}