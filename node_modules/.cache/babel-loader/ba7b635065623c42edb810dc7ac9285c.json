{"ast":null,"code":"var _jsxFileName = \"/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/frontend/create-table.js\";\nimport { IonCard, IonCardContent, IonItem, IonImg } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\nimport { Capacitor } from '@capacitor/core'; //import { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\n//import { useStorage } from '@ionic/react-hooks/storage';\n\nimport { readPicture } from '../backend/data'; //const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n//const { get, set } = useStorage();\n// createTable returns an array containing per line an object with the stored data\n// e.g. [{id:51346431, date:02.01.2020}]\n\nexport const createTable = stringData => {\n  console.log('stringData:', stringData);\n  const stringArray = stringData.split('\\n');\n  console.log('string array:');\n  console.log(stringArray);\n  const header = Object.keys(JSON.parse(stringArray[0])); // array from all the keys\n\n  let tableData = [];\n\n  for (let i = 0; i < stringArray.length; i++) {\n    tableData.push(JSON.parse(stringArray[i]));\n  } //console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n\n\n  return tableData;\n};\nexport const DynamicData = (stringData, settings, filename) => {\n  console.log('i entered dynamicData'); //object contains an array with an object inside\n  // every row of the object needs to have the same keys => to be deletet?\n  //the keys of the object will be the titles\n  //const titles = Object.keys(array[0])\n\n  /* Explanation what the function does:\n  1. the outer map iterates through all the objects (lines) in the array\n      and creates the same amount of Ioncards.\n  2. The variable object contains each of the single objects in array\n  3: Object.keys(object) creates an array with all the keys in object\n  4. .filter removes the key with id\n  5. map iterates through all the remaining keys and creates for each key\n      a IonCardconten with the content key: value\n  */\n\n  const [data, setData] = useState([]); //  const data = ''\n\n  const array = createTable(stringData);\n  const folder = filename.split('/')[0];\n  console.log(folder);\n  console.log('Array:', array);\n  useEffect(() => {\n    const picArray = [];\n\n    const createPicArray = async () => {\n      for (let i = 0; i < array.length; i++) {\n        const temp = await readPicture(folder + '/' + array[i].id.toString() + '.jpeg');\n        picArray.push(temp);\n        console.log('Temp pic:', temp);\n        console.log('picture Array:', picArray[0].uri);\n      } //setData(picArray)\n\n    }; //const pics = createPicArray()\n\n\n    createPicArray();\n    console.log('picArray:', picArray); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /*\n   let ret = ''\n   \n   const card = async () => { \n       array.map(object => {\n           console.log('next step is read picture:')\n           console.log('pic folder:', folder + '/' + object.id.toString() + '.jpeg')\n            const picture = readPicture(folder + '/' + object.id.toString() + '.jpeg');\n           console.log('picture:', picture)\n           \n           }\n       )\n       setData(ret)\n   }\n   */\n\n  /*\n  const card = array.map(object => \n      <IonCard>\n          {Object.keys(object).filter(key => key !== 'id').map(key => \n          <IonCardContent>{key}: {object[key]}</IonCardContent>\n          )}\n      </IonCard>\n      )*/\n\n  /*\n          //http://localhost:8100/\n          let file = Capacitor.convertFileSrc('file:///EXTERNAL/data/1587280686243.jpeg');\n  \n          console.log('feil:', file)\n  \n          console.log('capacitorSRC:', Capacitor.convertFileSrc('file://your/image/path/'))\n  \n      console.log('PCIARRAY 0:', picArray[0])\n  */\n\n  /*\n      let ret\n      if (picArray[0]){\n          ret =  <IonItem> Test\n          <IonImg src={picArray[0].uri}/>\n      </IonItem>\n      } else {\n          ret = <IonItem>n√ºscht</IonItem>\n      }\n  */\n\n  /*\n      let ret\n      if (picArray) {\n      ret = picArray.map( (pic, index) =>\n          <IonItem> Test {index}\n          \n      </IonItem>\n      )\n      }\n  */\n\n  const ret = data.map((pic, index) => /*#__PURE__*/React.createElement(IonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 1\n    }\n  }, \" Test \", index));\n  return ret;\n};","map":{"version":3,"sources":["/mnt/Data/Javascript_code/Ionic/coffe-db/src/components/frontend/create-table.js"],"names":["IonCard","IonCardContent","IonItem","IonImg","React","useState","useEffect","Capacitor","readPicture","createTable","stringData","console","log","stringArray","split","header","Object","keys","JSON","parse","tableData","i","length","push","DynamicData","settings","filename","data","setData","array","folder","picArray","createPicArray","temp","id","toString","uri","ret","map","pic","index"],"mappings":"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","sourcesContent":["import { IonCard, IonCardContent, IonItem, IonImg } from '@ionic/react';\nimport React, { useState, useEffect } from 'react';\n\nimport { Capacitor } from '@capacitor/core';\n\n\n\n//import { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\n//import { useStorage } from '@ionic/react-hooks/storage';\n\nimport { readPicture } from '../backend/data'\n\n//const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n//const { get, set } = useStorage();\n\n\n\n\n\n\n\n// createTable returns an array containing per line an object with the stored data\n// e.g. [{id:51346431, date:02.01.2020}]\nexport const createTable = (stringData) => {\n    console.log('stringData:', stringData)\n    const stringArray = stringData.split('\\n')\n    console.log('string array:')\n    console.log(stringArray)\n    const header = Object.keys(JSON.parse(stringArray[0]))  // array from all the keys\n    let tableData = []\n    for (let i = 0; i < stringArray.length; i++){\n      tableData.push(JSON.parse(stringArray[i])) \n    }\n  //console.log(tableData[0][header[1]])  //!!! important how to access object id by variable [...]\n    return tableData  \n  }\n\n\n\n\n\nexport const DynamicData = (stringData, settings, filename) => {\n    console.log('i entered dynamicData')\n    \n    //object contains an array with an object inside\n    // every row of the object needs to have the same keys => to be deletet?\n    //the keys of the object will be the titles\n\n    //const titles = Object.keys(array[0])\n\n    /* Explanation what the function does:\n    1. the outer map iterates through all the objects (lines) in the array\n        and creates the same amount of Ioncards.\n    2. The variable object contains each of the single objects in array\n    3: Object.keys(object) creates an array with all the keys in object\n    4. .filter removes the key with id\n    5. map iterates through all the remaining keys and creates for each key\n        a IonCardconten with the content key: value\n    */\n\n   const [data, setData] = useState([])\n      //  const data = ''\n    const array = createTable(stringData)\n\n    const folder = filename.split('/')[0]\n    console.log(folder)\n    console.log('Array:', array)\n\n    useEffect(()=> {\n    const picArray = []\n    const createPicArray = async () => {\n        \n        for (let i=0; i<array.length; i++){\n            const temp = await readPicture(folder + '/' + array[i].id.toString() + '.jpeg')\n            picArray.push(temp)\n            console.log('Temp pic:',temp)\n            console.log('picture Array:', picArray[0].uri)\n        }\n        //setData(picArray)\n\n    } \n   //const pics = createPicArray()\n\n   createPicArray()\n   console.log('picArray:', picArray)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n   \n   \n   /*\n    let ret = ''\n    \n    const card = async () => { \n        array.map(object => {\n            console.log('next step is read picture:')\n            console.log('pic folder:', folder + '/' + object.id.toString() + '.jpeg')\n\n            const picture = readPicture(folder + '/' + object.id.toString() + '.jpeg');\n            console.log('picture:', picture)\n            \n            }\n        )\n        setData(ret)\n    }\n    */\n   \n    /*\n    const card = array.map(object => \n        <IonCard>\n            {Object.keys(object).filter(key => key !== 'id').map(key => \n            <IonCardContent>{key}: {object[key]}</IonCardContent>\n            )}\n        </IonCard>\n        )*/\n\n/*\n        //http://localhost:8100/\n        let file = Capacitor.convertFileSrc('file:///EXTERNAL/data/1587280686243.jpeg');\n\n        console.log('feil:', file)\n\n        console.log('capacitorSRC:', Capacitor.convertFileSrc('file://your/image/path/'))\n\n    console.log('PCIARRAY 0:', picArray[0])\n*/\n\n/*\n    let ret\n    if (picArray[0]){\n        ret =  <IonItem> Test\n        <IonImg src={picArray[0].uri}/>\n    </IonItem>\n    } else {\n        ret = <IonItem>n√ºscht</IonItem>\n    }\n*/\n\n/*\n    let ret\n    if (picArray) {\n    ret = picArray.map( (pic, index) =>\n        <IonItem> Test {index}\n        \n    </IonItem>\n    )\n    }\n*/\n\nconst ret = data.map( (pic, index) =>\n<IonItem> Test {index}\n\n</IonItem> )\n\n return ret \n}\n"]},"metadata":{},"sourceType":"module"}